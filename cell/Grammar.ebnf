(*

node                                                     ->       SOURCE.
  |-block
  |   |-statement
  |       |-expression                                   ->       comparison, expression, ε.
  |       |   |-lambda_def                               ->       identifier, parameters, block
  |       |   |-primary
  |       |   |   |-atom                                 ->       expression, ε.
  |       |   |   |   |-number                           ->       FINAL.
  |       |   |   |   |-identifier                       ->       FINAL.
  |       |   |   |   |-string                           ->       FINAL.
  |       |   |   |   |-boolean                          ->       FINAL.
  |       |   |   |   |-array                            ->       expression
  |       |   |   |   |-object
  |       |   |   |   |   |-kvpair
  |       |   |   |   |       |-object_key               ->       identifier, string
  |       |   |   |   |       |-object_value             ->       expression
  |       |   |   |   |           |-method               ->       identifier, parameters, block
  |       |   |   |   |-call                             ->       expression, parameters
  |       |   |   |-attribute_def                        ->       primary, identifier
  |       |   |   |-subscription                         ->       expression
  |       |   |   |-slicing                              ->       expression
  |       |   |-comparison                               ->       expression
  |       |       |-disjunction                          ->       disjunction
  |       |           |-conjunction
  |       |               |-inversion                    ->       inversion
  |       |                   |-compare_op
  |       |                       |-equal_op             ->       bitwise_or
  |       |                       |-strictEqual_op       ->       bitwise_or
  |       |                       |-notEqual_op          ->       bitwise_or
  |       |                       |-strictNotEq_op       ->       bitwise_or
  |       |                       |-lessThan_op          ->       bitwise_or
  |       |                       |-lessThanEq_op        ->       bitwise_or
  |       |                       |-greaterThan_op       ->       bitwise_or
  |       |                       |-greaterThanEq_op     ->       bitwise_or
  |       |-simple_stmt
  |       |   |-assignment                               ->       identifier, expression, subscription
  |       |   |   |-augassign                            ->       FINAL.
  |       |   |-spread                                   ->       expression
  |       |   |-return_stmt                              ->       expression, FINAL.
  |       |   |-import_stmt                              ->       identifier, string
  |       |   |-throw_stmt                               ->       expression, FINAL.
  |       |   |-delete_stmt                              ->       expression
  |       |   |-yield_stmt                               ->       expression
  |       |   |-'break'                                  ->       FINAL.
  |       |   |-'continue'                               ->       FINAL.
  |       |-compound_stmt
  |       |   |-function_def                             ->       identifier, parameters, block
  |       |   |-if_stmt                                  ->       comparison, block
  |       |   |   |-elif_stmt                            ->       comparison, block, elif_stmt, else_block
  |       |   |   |-else_block                           ->       block
  |       |   |-class_def                                ->       identifier
  |       |   |-for_stmt                                 ->       assignment, comparison, expression, block
  |       |   |-while_stmt                               ->       comparison, block
  |       |   |-switch_stmt                              ->       expression, statement

parameters -> identifier

bitwise_or -> bitwise_xor -> bitwise_and -> shift_expr -> sum -> term -> factor -> power -> primary

*)

block =
    | '{', statement, '}'
;

newline = ? 新一行 ?;

statement =
    | statement, (newline, statement)*
    | expression
    | simple_stmt
    | compound_stmt
    | newline
;

expression =
    | '-', expression
    | primary
    | comparison, '?' expression, ':', expression
    | expression, '??', expression
    | lambda_def
;

lambda_def =
    | identifier, '=>', block
    | '(', [parameters], ')', '=>', block
    | 'function', '(', [parameters], ')', block
;

primary =
    | atom
    | attribute_ref
    | subscription
    | slicing
;

atom =
    | '(', expression, ')'
    | number
    | identifier
    | string
    | boolean
    | array
    | object
    | call
    | ε
;

attribute_ref = primaty, '.', atom;

number = ? 数字 ?;

identifier = ? 标识符 ?;

string  =
    | "'", ? 字符 ?, "'"
    | '"', ? 字符 ?, '"'
    | '`', ? 字符 ?, '`'
;

boolean =
    | 'true'
    | 'false'
;

subscription = expression, '[', expression, ']';

array = '[', [expression], (',', expression)*, ']';

slicing = expression, '[', [expression], ',', [expression], [',', [expression]] ']';

object_key =
    | identifier
    | string
;
object_value =
    | expression
    | method
;
kvpair = object_key, ':', object_value;
object = '{', [kvpair], (',', kvpair)*, '}';

method = identifier, '(', [parameters], ')', block;

call = expression, '(', [parameters], ')';

parameters = identifier, (',', identifier)*;



simple_stmt =
    | assignment
    | spread 
    | return_stmt
    | import_stmt
    | throw_stmt
    | delete_stmt
    | yield_stmt
    | 'break'
    | 'continue'
;
compound_stmt =
    | function_def
    | if_stmt
    | class_def
    | for_stmt
    | while_stmt
    | switch_stmt
;



assignment =
    | ('var' | 'let' | 'const'), identifier, ('=', identifier)*, '=', expression
    | ('var' | 'let' | 'const'), identifier, '=', expression, (',', identifier, '=', expression)*
    | ('var' | 'let'), identifier, (',', identifier)*
    | identifier, ('=', identifier)*, '=', expression
    | identifier, augassign, expression
    | subscription, '=', expression
;
augassign =
    | '+='
    | '-='
    | '*='
    | '/='
    | '%='
    | '&='
    | '|='
    | '^='
    | '~='
    | '<<='
    | '>>='
    | '**='
;

spread = '...', expression;

return_stmt =
    | 'return', expression
    | 'return'
;

import_stmt =
    | 'import', '*', 'as', Identifier, 'from', string
    | 'import', '{', identifier, (',', identifier)*, '}', 'from', string
    | 'import', string
;

throw_stmt =
    | 'throw', expression
    | 'throw'
;

delete_stmt = 'delete', expression;

yield_stmt = 'yield', expression;



function_def =
    | 'function', identifier, '(', [parameters], ')', block
    | 'async', 'function', identifier, '(', [parameters] ')', block
;
if_stmt =
    | 'if' comparison, block, elif_stmt
    | 'if' comparison, block, [else_block]
;
elif_stmt =
    | 'else', 'if', comparison, block, elif_stmt
    | 'else', 'if', comparison, block, [else_block]
;
else_block =
    | 'else', block
;
class_def = 'class', identifier, ['extends', identifier], block;
for_stmt =
    | 'for', '(', [assignment], (',', assignment)*, ';', [comparison], (',', comparison)*, ';', [expression], (',', expression)*, ')', block
    | 'for', '(', assignment, ('in' | 'of'), expression, block
;
while_stmt =
    | 'while', '(', comparison, ')', block
    | 'do', block, 'while', '(', comparison, ')', block
;
switch_stmt = 'switch', '(', expression, ')', '{', ('case', expression, ':', [statement], ['break'])*, ['default', ':', [statement], ['break']], '}';



comparison =
    | expression
    | disjunction
;
disjunction =
    | conjunction, ('||', conjunction )+ 
    | conjunction
;
conjunction =
    | inversion, ('&&', inversion )+ 
    | inversion
;
inversion =
    | '!', inversion
    | compare_op
;
compare_op =
    | equal_op
    | strictEqual_op
    | notEqual_op
    | strictNotEq_op
    | lessThan_op
    | lessThanEq_op
    | greaterThan_op
    | greaterThanEq_op
;
equal_op = '==', bitwise_or;
strictEqual_op = '===', bitwise_or;
notEqual_op = '!=', bitwise_or;
strictNotEq_op = '!==', bitwise_or;
lessThan_op = '<', bitwise_or;
lessThanEq_op = '<=', bitwise_or;
greaterThan_op = '>', bitwise_or;
greaterThanEq_op = '>=', bitwise_or;



bitwise_or =
    | bitwise_or '|' bitwise_xor 
    | bitwise_xor
;
bitwise_xor =
    | bitwise_xor '^' bitwise_and 
    | bitwise_and
;
bitwise_and =
    | bitwise_and '&' shift_expr 
    | shift_expr
;
shift_expr =
    | shift_expr '<<' sum 
    | shift_expr '>>' sum 
    | sum
;
sum =
    | sum '+' term 
    | sum '-' term 
    | term
;
term =
    | term '*' factor 
    | term '/' factor 
    | term '%' factor 
    | factor
;
factor =
    | '+' factor 
    | '-' factor 
    | '~' factor 
    | power
;
power =
    | primary '**' factor 
    | primary
;