block =
    | '{', statement, '}'
    | statement
;
statement =
    | statement, (newline, statement)*
    | expression
    | simple_stmt
    | compound_stmt
    | newline
;
expression =
    | ternaryOp
    | merge
    | lambda_def    √
    | binaryOp      √
    | attribute_ref √
;
merge = expression, '??', expression;

ternaryOp = binaryOp, '?' expression, ':', expression;

lambda_def =
    | identity, '=>', block
    | '(', [arguments], ')', '=>', block
    | 'function', '(', [arguments], ')', block
;
primary =
    | atom
    | subscription
    | slicing
;
atom =
    | '(', expression, ')'
    | number | identity | string | boolean
    | array
    | object
    | call
    | ε
;
attribute_ref = primaty, '.', atom;

number = ? 数字 ?;

identity = ? 标识符 ?;

string  =
    | "'", ? 字符 ?, "'"
    | '"', ? 字符 ?, '"'
    | '`', ? 字符 ?, '`'
;
boolean =
    | 'true'
    | 'false'
;
subscription = expression, '[', expression, ']';

array = '[', [expression], (',', expression)*, ']';

slicing = expression, '[', [expression], ',', [expression], [',', [expression]] ']';

object_key = identity | string;
kvpair = object_key, ':', expression;
object = '{', [kvpair], (',', kvpair)*, '}';

call = expression, '(', [parameters], ')';

parameters = expression, (',', expression)*;

arguments = identity, (',', identity)*;



simple_stmt =
    | assignment
    | spread 
    | return_stmt
    | import_stmt
    | export_stmt
    | delete_stmt
    | 'break'
    | 'continue'
;
compound_stmt =
    | function_def
    | if_stmt
    | class_def
    | for_stmt
    | while_stmt
    | switch_stmt
;



assignment =
    | ('var' | 'let' | 'const'), identity, ('=', identity)*, '=', expression
    | ('var' | 'let' | 'const'), identity, '=', expression, (',', identity, '=', expression)*
    | ('var' | 'let'), identity, (',', identity)*
    | identity, ('=', identity)*, '=', expression
    | identity, augassign, expression
    | subscription, '=', expression
;
augassign =
    | '+='
    | '-='
    | '*='
    | '/='
    | '%='
    | '&='
    | '|='
    | '^='
    | '~='
    | '<<='
    | '>>='
    | '**='
;
spread = '...', expression;

return_stmt =
    | 'return', expression
    | 'return'
;
import_stmt =
    | 'import', '*', 'as', Identifier, 'from', string
    | 'import', '{', identity, (',', identity)*, '}', 'from', string
;
export_stmt = 'export', '{', identity, (',', identity)*, '}';

delete_stmt = 'delete', expression;



function_def = 'function', identity, '(', [arguments], ')', block;

if_stmt =
    | 'if' binaryOp, block, elif_stmt
    | 'if' binaryOp, block, [else_block]
;
elif_stmt =
    | 'else', 'if', binaryOp, block, elif_stmt
    | 'else', 'if', binaryOp, block, [else_block]
;
else_block = 'else', block;

class_def = 'class', identity, ['extends', identity], block;

for_stmt =
    | 'for', '(', [assignment], (',', assignment)*, ';', [binaryOp], (',', binaryOp)*, ';', [expression], (',', expression)*, ')', block
    | 'for', '(', assignment, ('in' | 'of'), expression, block
;
while_stmt =
    | 'while', '(', binaryOp, ')', block
    | 'do', block, 'while', '(', binaryOp, ')', block
;
switch_stmt = 'switch', '(', expression, ')', '{', ('case', expression, ':', [statement], ['break'])*, ['default', ':', [statement], ['break']], '}';



binaryOp =
    | expression
    | disjunction
;
disjunction =
    | conjunction, ('||', conjunction )+ 
    | conjunction
;
conjunction =
    | inversion, ('&&', inversion )+ 
    | inversion
;
inversion =
    | '!', inversion
    | compare_op
;
compare_op =
    | equal_op
    | strictEqual_op
    | notEqual_op
    | strictNotEq_op
    | lessThan_op
    | lessThanEq_op
    | greaterThan_op
    | greaterThanEq_op
;
equal_op = '==', bitwise_or;
strictEqual_op = '===', bitwise_or;
notEqual_op = '!=', bitwise_or;
strictNotEq_op = '!==', bitwise_or;
lessThan_op = '<', bitwise_or;
lessThanEq_op = '<=', bitwise_or;
greaterThan_op = '>', bitwise_or;
greaterThanEq_op = '>=', bitwise_or;



bitwise_or =
    | bitwise_or '|' bitwise_xor 
    | bitwise_xor
;
bitwise_xor =
    | bitwise_xor '^' bitwise_and 
    | bitwise_and
;
bitwise_and =
    | bitwise_and '&' shift_expr 
    | shift_expr
;
shift_expr =
    | shift_expr '<<' sum 
    | shift_expr '>>' sum 
    | sum
;
sum =
    | sum '+' term 
    | sum '-' term 
    | term
;
term =
    | term '*' factor 
    | term '/' factor 
    | term '%' factor 
    | factor
;
factor =
    | '+' factor 
    | '-' factor 
    | '~' factor 
    | power
;
power =
    | primary '**' factor 
    | primary
;